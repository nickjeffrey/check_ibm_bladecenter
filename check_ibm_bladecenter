#!/usr/bin/perl -w
#



# DESCRIPTION
# -----------
#  This script is a nagios check that determines the health status of an IBM BladeCenter chassis


# OUTSTANDING TASKS
# ----------------




# CHANGE LOG
# ----------
#  2015/07/23 	njeffrey@anisoftgroup.com 	Script created



# NOTES
# -----
#
#  This script should return one (and only one) line of ouput.  Multiple
#  lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#  You will need a section in the services.cfg
#  file on the nagios server that looks similar to the following.
#   define service{
#           use                             generic-24x7-service
#           host_name                       bcmm1
#           service_description             IBM BladeCenter
#           check_command                   check_ibm_bladecenter!public
#           }
#
#  You will need a section in the commands.cfg
#  file on the nagios server that looks similar to the following.
#     # ---------------------------------------------------------------------------
#     # 'check_brocade_health' command definition
#     define command{
#             command_name    check_ibm_bladecenter!public
#             command_line    $USER1$/check_ibm_bladecenter -H $HOSTADDRESS$ -c $ARG1$
#             }
#
#
#


use strict;					#enforce good coding practices
use Getopt::Long;                       	#allow --long-switches to be used as parameters
use Net::SNMP;					#install perl module with:   perl -MCPAN -e 'install Net::SNMP'   or yum install perl-Net-SNMP


# declare variables
my ($OK,$WARN,$CRITICAL,$UNKNOWN);
my ($CHECK_NAME,$host,$community,$community_default);
my ($amm_health,$ambient_temp,$internal_temp,$bay1_fanspeed,$bay2_fanspeed);
my ($bay1_powermodule_fanspeed,$bay2_powermodule_fanspeed,$bay3_powermodule_fanspeed,$bay4_powermodule_fanspeed);
my ($chassis_ethernet_backplane_status,$blowers_installed,$blower1_status,$blower2_status);
my ($switches_installed,$switches_status,$blades_installed,$blades_status);
my ($pingstatus);
my ($opt_c,$opt_h,$opt_H);
my ($verbose,$oid,$session,$error,$result);
$community_default="public";			#use this value if user does not specify SNMP community string
$CHECK_NAME= "BladeCenter health";
$verbose = "";				#for debugging



#
# Nagios return codes
#
$OK       = 0;
$WARN     = 1;
$CRITICAL = 2;
$UNKNOWN  = 3;





sub get_options {
   #
   # this gets the command line parameters provided by the users
   print "running get_options subroutine \n" if ($verbose eq "yes");
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "c=s" => \$opt_c, "community=s" => \$opt_c, 
      "H=s" => \$opt_H, "host=s"      => \$opt_H, 
   );
   #
   # If the user did not supply a --community= value, use the default.
   #
   if( defined( $opt_c ) ) {
      $community = $opt_c;
   } else {
      $community = $community_default;
   }
   #
   # If the user did not supply a -H or --host== value, generate a warning.
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME Unknown - cannot determine remote host.  Usage: $0 -H host -c community \n";
      exit $UNKNOWN;				#exit script
   }
   #
   #
   print "   host=$host community=$community \n" if ($verbose eq "yes");
}                       #end of subroutine




sub sanity_checks {
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   #
   #
   #
   # confirm a remote host is defined
   if( ! defined( $host ) ) {
      print "$CHECK_NAME Unknown - missing name of remote host to check.  Use $0 -h for help\n";
      exit $UNKNOWN;                                    #exit script
   }
   #
   #
   #
   # Confirm the remote host is up
   #
   print "trying to ping $host \n" if ($verbose eq "yes");
   open(IN,"ping -c 1 -w 1 $host 2>&1 |");     #send a single ping to the remote host and wait 1 second for a reply
   while (<IN>) {                                  #read a line from STDIN
      if ( /100% packet loss/ ) {                  #check for ping timeouts (indicates host may be down)
         $pingstatus = "$CHECK_NAME UNKNOWN -- no ping reply from $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /NOT FOUND/ ) {                         #check for invalid hostname (using AIX ping)
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not resolve hostname $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /unknown host/ ) {                      #check for invalid hostname (using Linux ping)
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not resolve hostname $host \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
      if ( /no route to host/ ) {                  #check for routing problems
         $pingstatus = "$CHECK_NAME UNKNOWN -- could not find a route to $host - check routing tables \n";
         print $pingstatus;                            #print error message
         exit $UNKNOWN;                            #exit script
      }                                            #end of if block
   }                                               #end of while loop
   close IN;                                       #close filehandle
}						#end of subroutine





sub get_usage {
   #
   # this subroutine gets called if user enters -h or --help parameters
   print "running get_usage subroutine \n" if ($verbose eq "yes");
   #
   if( $opt_h ) {
      print "Nagios plugin for determining health of Brocade fibre switch \n";
      print "$0 [options]  \n";
      print "    where options are: \n";
      print "    -c --community=SNMP_community_string     (default=public)\n";
      print "    -h --help \n";
      print "    -H --host=IP|hostname \n";
      print "\n\n";
      exit;
   }                                            #end of if block
}						#end of subroutine




sub open_snmp_session {
   #
   print "running get_snmp subroutine \n" if ($verbose eq "yes");
   #
   print "   opening SNMP session \n" if ($verbose eq "yes");
   ($session, $error) = Net::SNMP->session( -hostname  => $host,  -community => $community );

   if (!defined $session) {
      print "$CHECK_NAME Unknown - SNMP request timed out.  Check SNMP community string.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }
}                                               #end of subroutine



sub get_amm_health {
   #
   print "running get_amm_health subroutine \n" if ($verbose eq "yes");
   #
   # this check will return one of four values:  0=critical 2=noncritical error   4=system level error   255=normal
   # the warning range of 255:255 means warn if value is outside the range of 255 to 255
   # the critical range of 1: means critical if value is less than 1
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.7.1.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $amm_health = $result->{$oid};   #save value for later
   print "   amm_health is $amm_health (0=critical   2=noncritical error   4=system level error   255=normal) \n" if ($verbose eq "yes");
   #
   # confirm we got a valid switch type
   if ( $amm_health == 0 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Advanced Management Module has a critical error - please investigate \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $amm_health == 2 ) {					#look for specific error
      print "$CHECK_NAME WARN - Advanced Management Module has a noncritical error - please investigate \n";
      exit $WARN;				#exit script
   }									#end of if block
   if ( $amm_health == 4 ) {					#look for specific error
      print "$CHECK_NAME WARN - Advanced Management Module has a system level error \n";
      exit $WARN;				#exit script
   }									#end of if block
   #
   # change the value from a number to a human readable value that we can put in the output message
   $amm_health = "OK" if ($amm_health == 255 );
}									#end of subroutine


sub get_ambient_temperature {
   #
   print "running get_ambient_temperature subroutine \n" if ($verbose eq "yes");
   #
   # this check looks at the ambient room temperature as measured by the
   # sensor on the front panel of the BladeCenter chassis
   #
   # The OID will contain a value similar to:  24.50 Centigrade
   # So, we will need to strip off the Centigrade portion to do math against the number
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.1.5.1.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $ambient_temp = $result->{$oid};   #save value for later
   print "   ambient temperature is $ambient_temp \n" if ($verbose eq "yes");
   #
   # strip off the Centigrade or Fahrenheit units 
   if ( $ambient_temp =~ / Centigrade/ ) {
      $ambient_temp =~ s/ Centigrade//g;
   }
   if ( $ambient_temp =~ / Fahrenheit/ ) {
      $ambient_temp =~ s/ Fahrenheit//g;
      $ambient_temp = $ambient_temp + 1 if ($ambient_temp == 32);  #avoid divide by zero error at 32 degrees Fahrenheit
      $ambient_temp = ( ($ambient_temp - 32) * 9 / 5 );	#convert Fahrenheit to Centigrade
   }
   #
   # check to see if temperature is outside normal ranges  (all numbers are in Centigrade because Fahrenheit is silly)
   if ( $ambient_temp > 30 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Ambient temperature is $ambient_temp degrees C.  The air conditioning may have failed.  Consider shutting down hardware now. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $ambient_temp > 28 ) {					#look for specific error
      print "$CHECK_NAME WARN - Ambient temperature is $ambient_temp degrees C.  The air conditioning may have failed.  Consider shutting down hardware now. \n";
      exit $WARN;				#exit script
   }									#end of if block
   if ( $ambient_temp < 10 ) {					#look for specific error
      print "$CHECK_NAME WARN - Ambient temperature is $ambient_temp degrees C.  That seems unreasonably cold.  Please check the air conditioning. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_internal_temperature {
   #
   print "running get_internal_temperature subroutine \n" if ($verbose eq "yes");
   #
   # this check looks at the internal chassis temperature as measured by the
   # sensor on the inside panel of the BladeCenter chassis
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.1.1.2.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $internal_temp = $result->{$oid};   #save value for later
   print "   internal temperature is $internal_temp \n" if ($verbose eq "yes");
   #
   # strip off the Centigrade or Fahrenheit units 
   if ( $internal_temp =~ / Centigrade/ ) {
      $internal_temp =~ s/ Centigrade//g;
   }
   if ( $internal_temp =~ / Fahrenheit/ ) {
      $internal_temp =~ s/ Fahrenheit//g;
      $internal_temp = $internal_temp + 1 if ($internal_temp == 32);  #avoid divide by zero error at 32 degrees Fahrenheit
      $internal_temp = ( ($internal_temp - 32) * 9 / 5 );	#convert Fahrenheit to Centigrade
   }
   #
   # confirm we got a valid switch type
   if ( $internal_temp > 46 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Chassis internal temperature is $internal_temp degrees C.  The air conditioning may have failed.  Consider shutting down hardware now. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $internal_temp > 43 ) {					#look for specific error
      print "$CHECK_NAME WARN - Chassis internal temperature is $internal_temp degrees C.  The air conditioning may have failed.  Consider shutting down hardware now. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine




sub get_bay1_fanspeed {
   #
   print "running get_bay1_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   # The OID will contain a value similar to:   60% of maximum
   # We need to strip off the  "% of maximum"  so we can do math against the number
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.3.1.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay1_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 1 fan speed RPM is is $bay1_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   # strip off the "% of maximum" portion
   $bay1_fanspeed =~ s/\% of maximum//g if ( $bay1_fanspeed =~ /\% of maximum/ );
   #
   if ( $bay1_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 1 fan speed is $bay1_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay1_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 1 fan speed is $bay1_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_bay2_fanspeed {
   #
   print "running get_bay2_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.3.2.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay2_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 2 fan speed RPM is is $bay2_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   # strip off the "% of maximum" portion
   $bay2_fanspeed =~ s/\% of maximum//g if ( $bay2_fanspeed =~ /\% of maximum/ );
   #
   if ( $bay2_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 2 fan speed is $bay2_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay2_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 2 fan speed is $bay2_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_bay1_powermodule_fanspeed {
   #
   print "running get_bay1_powermodule_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.6.1.1.5.1"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay1_powermodule_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 1 power module fan speed RPM is is $bay1_powermodule_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   if ( $bay1_powermodule_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 1 power module fan speed is $bay1_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay1_powermodule_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 1 power module fan speed is $bay1_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_bay2_powermodule_fanspeed {
   #
   print "running get_bay2_powermodule_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.6.1.1.5.2"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay2_powermodule_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 2 power module fan speed RPM is is $bay2_powermodule_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   if ( $bay2_powermodule_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 2 power module fan speed is $bay2_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay2_powermodule_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 2 power module fan speed is $bay2_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine

sub get_bay3_powermodule_fanspeed {
   #
   print "running get_bay3_powermodule_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.6.1.1.5.3"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay3_powermodule_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 3 power module fan speed RPM is is $bay3_powermodule_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   if ( $bay3_powermodule_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 3 power module fan speed is $bay3_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay3_powermodule_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 3 power module fan speed is $bay3_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_bay4_powermodule_fanspeed {
   #
   print "running get_bay4_powermodule_fanspeed subroutine \n" if ($verbose eq "yes");
   #
   # This check looks at the %max RPM of a cooling fan.  Alert if the RPM gets too close to the max
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.6.1.1.5.4"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $bay4_powermodule_fanspeed = $result->{$oid};   #save value for later
   print "   Bay 4 power module fan speed RPM is is $bay4_powermodule_fanspeed percent of maximum \n" if ($verbose eq "yes");
   #
   if ( $bay4_powermodule_fanspeed > 90 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Bay 4 power module fan speed is $bay4_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $CRITICAL;				#exit script
   }									#end of if block
   if ( $bay4_powermodule_fanspeed > 85 ) {					#look for specific error
      print "$CHECK_NAME WARN - Bay 4 power module fan speed is $bay4_powermodule_fanspeed percent of maximum.  Please check the cooling. \n";
      exit $WARN;				#exit script
   }									#end of if block
}									#end of subroutine


sub get_chassis_ethernet_backplane_status {
   #
   print "running get_chassis_ethernet_backplane_status subroutine \n" if ($verbose eq "yes");
   #
   # This check confirms the internal Ethernet backplane of the chassis is functioning  0=testSucceeded 1=testFailed
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.5.2.18.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $chassis_ethernet_backplane_status = $result->{$oid};   #save value for later
   print "   Chassis ethernet backplane status is $chassis_ethernet_backplane_status (0=testSucceeded 1=testFailed) \n" if ($verbose eq "yes");
   #
   if       ($chassis_ethernet_backplane_status == 1 ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - Chassis ethernet backplane status is failed \n";
      exit $CRITICAL;				#exit script
   } elsif ( $chassis_ethernet_backplane_status == 0 ) {	
      # nothing to do because the status is ok
   } else {
      print "$CHECK_NAME UNKNOWN - Could not determine status of chassis ethernet backplane at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   } 									# end of if/elsif/else block
   #
   # change the value from a number to a human readable value that we can put in the output message
   $chassis_ethernet_backplane_status = "OK" if ($chassis_ethernet_backplane_status == 0 );
}									#end of subroutine


sub get_blowers_installed {
   #
   print "running get_blowers_installed subroutine \n" if ($verbose eq "yes");
   #
   # This check confirms that both blowers are installed in the rear of the BladeCenter chassis.
   # The blowers are listed as a bitmap. The bitmap is a string containing a list of 1's and 0's that is as long as the number of blowers supported. 
   # If a blower is installed in a bay, a 1 is present in the string in the position representing the bay ID as read from left to right. 
   # For example, if a blower is installed in bay 1, and 2 blowers are supported, the string would look like '10'.
   #
   $oid = "1.3.6.1.4.1.2.3.51.2.2.5.2.65.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $blowers_installed = $result->{$oid};   #save value for later
   print "   Blowers installed:  $blowers_installed (00=none 01=right 10=left 11=both) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($blowers_installed) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine the number of installed blowers at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
   if       ($blowers_installed eq "00" ) {					#look for specific error
      print "$CHECK_NAME CRITICAL - both blowers are missing from the rear of the chassis. \n";
      exit $CRITICAL;				#exit script
   } elsif ( $blowers_installed eq "01" ) {	
      print "$CHECK_NAME WARN - the left rear blower is missing from the chassis \n";
      exit $WARN;				#exit script
   } elsif ( $blowers_installed eq "10" ) {	
      print "$CHECK_NAME WARN - the right rear blower is missing from the chassis \n";
      exit $WARN;				#exit script
   } elsif ( $blowers_installed eq "11" ) {	
      #nothing to do because "11" means both blowers are installed
   } else {
      print "$CHECK_NAME UNKNOWN - Could not determine which blowers are installed in the rear of the chassis using SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   } 									# end of if/elsif/else block
}									#end of subroutine



sub get_blower1_status {
   #
   print "running get_blower1_status subroutine \n" if ($verbose eq "yes");
   #
   # This check confirms the blower in the rear of the chassis is in a good state  0=unknown 1=good 2=warning 3=bad
   #
   # The blowers in the BladeCenter servers are used to cool the chassis. 
   # The health of the blower is determined based on its speed capacity to blow the air (which is 325 cubic feet per minute according to IBM), and also based on its state. 
   # The BladeCenter H series has 2 high-speed blowers for redundancy. 
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.3.10.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $blower1_status = $result->{$oid};   #save value for later
   print "   Blower 1 is $blower1_status (0=unknown 1=good 2=warning 3=bad) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($blower1_status) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine state of blower 1 at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
   if       ($blower1_status == 0 ) {					#look for specific error
      print "$CHECK_NAME UNKNOWN - could not determine blower 1 status \n";
      exit $UNKNOWN;				#exit script
   } elsif ( $blower1_status == 1 ) {	
      # nothing to do because the status is ok
   } elsif ( $blower1_status == 2 ) {	
      print "$CHECK_NAME WARN - blower 1 status is in warning state \n";
      exit $WARN;				#exit script
   } elsif ( $blower1_status == 3 ) {	
      print "$CHECK_NAME CRITICAL - blower 1 status is bad \n";
      exit $CRITICAL;				#exit script
   } else {
      print "$CHECK_NAME UNKNOWN - Could not determine state of blower 1 at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   } 									# end of if/elsif/else block
   #
   # change the value from a number to a human readable value that we can put in the output message
   $blower1_status = "OK" if ($blower1_status == 1 );
}									#end of subroutine


sub get_blower2_status {
   #
   print "running get_blower2_status subroutine \n" if ($verbose eq "yes");
   #
   # This check confirms the blower in the rear of the chassis is in a good state  0=unknown 1=good 2=warning 3=bad
   #
   # The blowers in the BladeCenter servers are used to cool the chassis. 
   # The health of the blower is determined based on its speed capacity to blow the air (which is 325 cubic feet per minute according to IBM), and also based on its state. 
   # The BladeCenter H series has 2 high-speed blowers for redundancy. 
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.3.11.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $blower2_status = $result->{$oid};   #save value for later
   print "   Blower 2 is $blower2_status (0=unknown 1=good 2=warning 3=bad) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($blower2_status) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine state of blower 1 at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
   if       ($blower2_status == 0 ) {					#look for specific error
      print "$CHECK_NAME UNKNOWN - could not determine blower 1 status \n";
      exit $UNKNOWN;				#exit script
   } elsif ( $blower2_status == 1 ) {	
      # nothing to do because the status is ok
   } elsif ( $blower2_status == 2 ) {	
      print "$CHECK_NAME WARN - blower 1 status is in warning state \n";
      exit $WARN;				#exit script
   } elsif ( $blower2_status == 3 ) {	
      print "$CHECK_NAME CRITICAL - blower 1 status is bad \n";
      exit $CRITICAL;				#exit script
   } else {
      print "$CHECK_NAME UNKNOWN - Could not determine state of blower 1 at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   } 									# end of if/elsif/else block
   #
   # change the value from a number to a human readable value that we can put in the output message
   $blower2_status = "OK" if ($blower2_status == 1 );
}									#end of subroutine



sub get_switches_installed {
   #
   print "running get_switches_installed subroutine \n" if ($verbose eq "yes");
   #
   # This check determines which switch modules are installed in the rear of the chassis (switches can be ethernet, fibre, infiniband)
   # The switch modules are listed as a bitmap. The bitmap is a string containing a list of 1's and 0's that is as long as the number of switch modules supported. 
   # If a switch module is installed in a bay, a 1 is present in the string in the position representing the bay ID as read from left to right. 
   # For example, if switch modules are installed in bays 1 and 3, and 4 switch modules are supported, the string would look like '1010'.
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.5.2.97.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $switches_installed = $result->{$oid};   #save value for later
   print "   Switches are installed in bays: $switches_installed  (0=no_switch  1=switch_installed) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($switches_installed) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine the number of installed switch modules at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
}									#end of subroutine


sub get_switches_status {
   #
   print "running get_switches_status subroutine \n" if ($verbose eq "yes");
   #
   # The previous subroutine told us which I/O modules are installed in the rear of the chassis.  (there are 10 I/O bays 
   # This subroutine makes sure all of those I/O modules are communicating with the chassis
   # If a switch module is installed and functioning in a bay, a 1 is present in the string in the position representing the bay ID as read from left to right. 
   # For example, if switch modules are installed and functioning in bays 1 and 3, and 4 switch modules are supported, the string would look like '1010'.
#       ; The number in the previous line ten characters.  There are ten bays in the back of a BladeCenter H.
#       ; The 1 values show the bays that contain working I/O modules, while the 0 values show bays that do not contain working I/O modules
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.5.2.113.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $switches_status = $result->{$oid};   #save value for later
   print "   Switches are communicating with the chassis in bays: $switches_status  (0=no_switch  1=switch_installed) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($switches_status) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine the number of installed switch modules at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
   if ( $switches_installed != $switches_status ) {					#confirm all the installed I/O modules are communicating with the chassis
      print "$CHECK_NAME WARN - I/O module not communicating with chassis - please investigate \n";
      exit $WARN;				#exit script
   }
   #
   # change the value from a number to a human readable value that we can put in the output message
   $switches_status = "OK" if ($switches_installed == $switches_status );
}									#end of subroutine


sub get_blades_installed {
   #
   print "running get_blades_installed subroutine \n" if ($verbose eq "yes");
   #
   # This check determines which blades are installed in the front of the chassis 
   # The blade modules are listed as a bitmap. The bitmap is a string containing a list of 1's and 0's that is as long as the number of blade modules supported. 
   # If a blade module is installed in a bay, a 1 is present in the string in the position representing the bay ID as read from left to right. 
   # For example, if blade modules are installed in bays 1 and 3, and 14 blade modules are supported, the string would look like '10100000000000'.
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.5.2.33.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $blades_installed = $result->{$oid};   #save value for later
   print "   Blades are installed in bays: $blades_installed  (0=no_blade  1=blade_installed) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($blades_installed) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine the number of installed blade server modules at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
}									#end of subroutine



sub get_blades_status {
   #
   print "running get_blades_status subroutine \n" if ($verbose eq "yes");
   #
   # The previous subroutine told us which blade servers are installed in the front of the chassis.
   # This subroutine makes sure the service processor in each blade is communicating with the chassis
   # If a blade server is installed and functioning in a bay, a 1 is present in the string in the position representing the bay ID as read from left to right. 
   # For example, if blade servers are installed and functioning in bays 1 and 3, and 14 blade servers are supported, the string would look like '10100000000000'.
   #
   $oid = ".1.3.6.1.4.1.2.3.51.2.2.5.2.49.0"; 
   $result = $session->get_request(-varbindlist => [ $oid ],);

   if (!defined $result) {
      $session->close();		#close SNMP session
      print "$CHECK_NAME Unknown - SNMP request to OID $oid failed.  $session->error() \n";
      exit $UNKNOWN;				#exit script
   }

   $blades_status = $result->{$oid};   #save value for later
   print "   Blade service processors are communicating with the chassis in bays: $blades_status  (0=no_switch  1=switch_installed) \n" if ($verbose eq "yes");
   #
   #
   if ( ! defined($blades_status) ) {					#confirm we have a value
      print "$CHECK_NAME UNKNOWN - Could not determine the number of installed blade servers at SNMP OID $oid \n";
      exit $UNKNOWN;				#exit script
   }
   if ( $blades_installed != $blades_status ) {					#confirm all the installed I/O modules are communicating with the chassis
      print "$CHECK_NAME WARN - Blade service processor not communicating with chassis - please investigate \n";
      exit $WARN;				#exit script
   }
   #
   # change the value from a number to a human readable value that we can put in the output message
   $blades_status = "OK" if ($blades_installed == $blades_status );
}									#end of subroutine




sub close_snmp_session {
   #
   print "running close_snmp_session subroutine \n" if ($verbose eq "yes");
   #
   # close the SNMP session
   print "   closing SNMP session \n" if ($verbose eq "yes");
   $session->close();
}                                               #end of subroutine






sub print_output {
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   # we only get this far if everything is ok
   print "$CHECK_NAME OK - AMM_status:$amm_health Ambient_temperature:${ambient_temp}C  Internal_temperature:${internal_temp}C  Blower1:$blower1_status Blower2:$blower2_status Ethernet_backplane:$chassis_ethernet_backplane_status IO_modules:$switches_status Blade_status:$blades_status \n";
   exit $OK;
}			#end of subroutine






# ----------------------- main body of program -------------------------------
get_options;
sanity_checks;
get_usage;
open_snmp_session;
get_amm_health;
get_ambient_temperature;
get_internal_temperature;
get_bay1_fanspeed;
get_bay2_fanspeed;
get_bay1_powermodule_fanspeed;
get_bay2_powermodule_fanspeed;
get_bay3_powermodule_fanspeed;
get_bay4_powermodule_fanspeed;
get_chassis_ethernet_backplane_status;
get_blowers_installed;
get_blower1_status;
get_blower2_status;
get_switches_installed;
get_switches_status;  
get_blades_installed;
get_blades_status;  
close_snmp_session;
print_output;
